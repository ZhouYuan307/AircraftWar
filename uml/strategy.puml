@startuml
'https://plantuml.com/class-diagram
abstract class AbstractAircraft
{
    # strategy:ShootStrategy
    # bulletFactory:BulletFactory
	# maxHp:int
    # hp:int
    # lastShootTime:long
    # shootInterval:long
    # power:int
    # direction:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp, ShootStrategy strategy, BulletFactory bulletFactory)
    + decreaseHp(int decrease):void
    + getHp():int
    + setStrategy(ShootStrategy strategy):void
    + executeStrategy():List<BaseBullet>
 }

interface ShootStrategy {
    +{abstract}doShoot(int x, int y, int direction, int power, BulletFactory factory):List<BaseBullet>
}

class ShootStraight{
    +doShoot(int x, int y, int direction, int power, BulletFactory factory):List<BaseBullet>
}

class ShootNull{
    +doShoot(int x, int y, int direction, int power, BulletFactory factory):List<BaseBullet>
}

class ShootMultiStraight{
    +doShoot(int x, int y, int direction, int power, BulletFactory factory):List<BaseBullet>
}

class ShootCircle{
    +doShoot(int x, int y, int direction, int power, BulletFactory factory):List<BaseBullet>
}

abstract class BaseItem{
    + BaseItem(int locationX, int locationY, int speedX, int speedY)
    + {abstract}activateEffect(HeroAircraft heroAircraft):void
    + forward():void
    + bombEffect():int
}

ShootStrategy <|..  ShootStraight
ShootStrategy <|..  ShootNull
ShootStrategy <|..  ShootMultiStraight
ShootStrategy <|..  ShootCircle
AbstractAircraft o--> ShootStrategy
BaseItem --> AbstractAircraft
BaseItem ..> ShootStraight
BaseItem ..> ShootNull
BaseItem ..> ShootMultiStraight
BaseItem ..> ShootCircle
@enduml