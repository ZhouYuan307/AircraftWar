@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
    + {abstract}bombEffect():int

}

abstract class AbstractAircraft
{
    # strategy:ShootStrategy
    # bulletFactory:BulletFactory
	# maxHp:int
    # hp:int
    # lastShootTime:long
    # shootInterval:long
    # power:int
    # direction:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp, ShootStrategy strategy, BulletFactory bulletFactory)
    + decreaseHp(int decrease):void
    + getHp():int
    + setStrategy(ShootStrategy strategy):void
    + executeStrategy():List<BaseBullet>
 }
AbstractFlyingObject <|-- AbstractAircraft

abstract class AbstractEnemy
{
    # itemAmount:int
    + AbstractEnemy(int locationX, int locationY, int speedX, int speedY, int hp, ShootStrategy strategy, BulletFactory bulletFactory)
    + spawnItems():List<BaseItem>
    + forward():void
    + {abstract} getScores():int
 }
AbstractAircraft <|-- AbstractEnemy

class HeroAircraft {
  - effectTimer:int
  + isReset:boolean
  - {static}instance:HeroAircraft
  - observerList:List<AbstractFlyingObject>
  - tempScores:int
  - savedShootInterval:long
  - HeroAircraft()
  + {static} getInstance():HeroAircraft
  + init(int locationX,int locationY, int speedX,int speedY,int hp):void
  + forward():void
  + heal(int healAmount):void
  + setShootInterval(int interval):void
  + setEffectTimer(int duration):void
  + getEffectTimer():long
  + resetStrategy():void
  + effectTimerUpdate(int timeInterval):void
  + addObserver(AbstractFlyingObject observer):void
  + removeObserver(AbstractFlyingObject observer):void
  + removeInvalid():void
  + useBomb():void
  + getScores():int
  + addInterval(int interval): void
  + saveInterval():void
  + getInterval():long
  + bombEffect():int
}
AbstractAircraft <|-- HeroAircraft

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp, ShootStrategy strategy, BulletFactory bulletFactory)
    + spawnItems():List<BaseItem>
    + getScores():int
    + bombEffect():int
}
AbstractEnemy <|-- MobEnemy

class EliteEnemy {
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp,ShootStrategy strategy, BulletFactory bulletFactory)
    + getScores():int
    + bombEffect():int
}
AbstractEnemy <|-- EliteEnemy

class SuperElite {
    + SuperElite(int locationX, int locationY, int speedX, int speedY, int hp,ShootStrategy strategy, BulletFactory bulletFactory)
    + getScores():int
    + bombEffect():int
}
AbstractEnemy <|-- SuperElite

class BossEnemy {
    - minX:int
    - maxX:int
    + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp,ShootStrategy strategy, BulletFactory bulletFactory)
    + forward():void
    + getScores():int
    + bombEffect():int
}
AbstractEnemy <|-- BossEnemy

abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower(int decrease):int

}
AbstractFlyingObject <|-- BaseBullet

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}
BaseBullet <|-- HeroBullet

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,int speedX, int speedY, int power)
    + bombEffect():int
}
BaseBullet <|-- EnemyBullet


abstract class BaseItem{
    + BaseItem(int locationX, int locationY, int speedX, int speedY)
    + {abstract}activateEffect(HeroAircraft heroAircraft):void
    + forward():void
    + bombEffect():int
}
AbstractFlyingObject <|-- BaseItem

class AttackItem {
    + AttackItem(int locationX, int locationY, int speedX, int speedY)
    + activateEffect(HeroAircraft heroAircraft):void
}
BaseItem <|-- AttackItem

class BombItem {
    + BombItem(int locationX, int locationY, int speedX, int speedY)
    + activateEffect(HeroAircraft heroAircraft):void
}

BaseItem <|-- BombItem

class HealthItem {
    + HealthItem(int locationX, int locationY, int speedX, int speedY)
    + activateEffect(HeroAircraft heroAircraft):void
}
BaseItem <|-- HealthItem

class BulletPlusItem {
    + BulletPlusItem(int locationX, int locationY, int speedX, int speedY)
    + activateEffect(HeroAircraft heroAircraft):void
}
BaseItem <|-- BulletPlusItem



@enduml