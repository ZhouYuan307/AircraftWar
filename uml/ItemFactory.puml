@startuml
'https://plantuml.com/class-diagram
abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}

 abstract class BaseItem{
     + BaseItem(int locationX, int locationY, int speedX, int speedY)
     + {abstract}activateEffect(HeroAircraft heroAircraft):void
     + forward():void
 }
 AbstractFlyingObject <|-- BaseItem

interface ItemFactory {
    +{abstract}createItem(int locationX, int locationY, int speedX, int speedY):BaseItem
}

class HealthItemFactory{
    +createItem(int locationX, int locationY, int speedX, int speedY):BaseItem
}
ItemFactory <|.. HealthItemFactory

class BombItemFactory{
    +createItem(int locationX, int locationY, int speedX, int speedY):BaseItem
}
ItemFactory <|.. BombItemFactory

class AttackItemFactory{
    +createItem(int locationX, int locationY, int speedX, int speedY):BaseItem
}
ItemFactory <|.. AttackItemFactory


class AttackItem {
    + AttackItem(int locationX, int locationY, int speedX, int speedY)
    + activateEffect(HeroAircraft heroAircraft):void
}
AttackItemFactory ..> AttackItem
BaseItem <|-- AttackItem

class BombItem {
    + AttackItem(int locationX, int locationY, int speedX, int speedY)
    + activateEffect(HeroAircraft heroAircraft):void
}
BombItemFactory ..> BombItem
BaseItem <|-- BombItem

class HealthItem {
    + HealthItem(int locationX, int locationY, int speedX, int speedY)
    + activateEffect(HeroAircraft heroAircraft):void
}
HealthItemFactory ..> HealthItem
BaseItem <|-- HealthItem
@enduml